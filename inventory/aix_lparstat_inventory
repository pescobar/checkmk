<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
>>>>>>> upstream/master


def _try_set(node, nkey, parsed, pkey):
    try:
        node[nkey] = parsed[pkey]
    except KeyError:
        pass
<<<<<<< HEAD
    return
=======
>>>>>>> upstream/master


def parse_aix_lparstat_inventory(info):
    lines = (raw[0] for raw in info if ':' in raw[0])
    pairs = (line.split(':', 1) for line in lines)
    parsed = {k.strip(): v.strip() for k, v in pairs}
    return parsed


def inv_aix_lparstat_inventory(info, inventory_tree):
    parsed = parse_aix_lparstat_inventory(info)

    cpu_node = inventory_tree.get_dict('hardware.cpu.')
    sys_node = inventory_tree.get_dict('hardware.system.')

    _try_set(cpu_node, "cpu_max_capa", parsed, "Maximum Capacity")
    _try_set(cpu_node, "type", parsed, "Type")

    _try_set(sys_node, "node_name", parsed, "Node Name")
    _try_set(sys_node, "partition_name", parsed, "Partition Name")
    _try_set(sys_node, "partition_number", parsed, "Partition Number")


inv_info['aix_lparstat_inventory'] = {
    "inv_function": inv_aix_lparstat_inventory,
}
