<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
>>>>>>> upstream/master


def _try_set(node, nkey, data, dkey):
    if dkey in data:
        node[nkey] = data[dkey]


def inv_docker_node_info(parsed, inventory_tree, status_data_tree):
    if not parsed:
        return

    node = inventory_tree.get_dict("software.applications.docker.")
    _try_set(node, "version", parsed, u"ServerVersion")
    _try_set(node, "registry", parsed, "IndexServerAddress")
    # {"NodeID":"","NodeAddr":"","LocalNodeState":"inactive","ControlAvailable":false,"Error":"","RemoteManagers":null}
    swarm_data = parsed.get("Swarm", {})
    _try_set(node, "swarm_state", swarm_data, "LocalNodeState")
    _try_set(node, "swarm_manager", swarm_data, "RemoteManagers")
    _try_set(node, "swarm_node_id", swarm_data, "NodeID")

    labels = parsed.get(u"Labels")
    if labels:
        node_labels = inventory_tree.get_list("software.applications.docker.node_labels:")
        node_labels += [{"label": label} for label in labels]

    status_node = status_data_tree.get_dict("software.applications.docker.")
    _try_set(status_node, "num_containers_total", parsed, "Containers")
    _try_set(status_node, "num_containers_running", parsed, "ContainersRunning")
    _try_set(status_node, "num_containers_paused", parsed, "ContainersPaused")
    _try_set(status_node, "num_containers_stopped", parsed, "ContainersStopped")
    _try_set(status_node, "num_images", parsed, "Images")


inv_info['docker_node_info'] = {
    'inv_function': inv_docker_node_info,
    'has_status_data': True,
}
