<<<<<<< HEAD
#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.k8s import *  # pylint: disable=wildcard-import,unused-wildcard-import
>>>>>>> upstream/master


def _parse_hosts(hosts):
    results = []
<<<<<<< HEAD
    for secret_name, hosts_ in hosts.iteritems():
=======
    for secret_name, hosts_ in hosts.items():
>>>>>>> upstream/master
        results.extend({"host": host, "secret_name": secret_name} for host in hosts_)
    return results


def _parse_backends(backends):
    return [{
        "path": path,
        "service_name": service_name,
        "service_port": service_port,
    } for path, service_name, service_port in backends]


<<<<<<< HEAD
def inv_k8s_ingresses(info, inventory_tree, status_data_tree):
    parsed = parse_k8s(info)
    path = "software.applications.kubernetes.ingresses.%s:"
    for name, data in sorted(parsed.iteritems()):
=======
def inv_k8s_ingresses(parsed, inventory_tree, status_data_tree):
    path = "software.applications.kubernetes.ingresses.%s:"
    for name, data in sorted(parsed.items()):
>>>>>>> upstream/master
        inv_node = inventory_tree.get_dict(path % name)
        inv_node.update({
            'backends': _parse_backends(data['backends']),
            'hosts': _parse_hosts(data['hosts']),
            'load_balancers': data['load_balancers'],
        })


inv_info['k8s_ingress_infos'] = {
    'inv_function': inv_k8s_ingresses,
<<<<<<< HEAD
    'includes': ['k8s.include'],
=======
>>>>>>> upstream/master
}
