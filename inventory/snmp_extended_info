<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
>>>>>>> upstream/master

# .1.3.6.1.2.1.47.1.1.1.1.4.10 1
# .1.3.6.1.2.1.47.1.1.1.1.2.10 Chassis Temperature Sensor
# .1.3.6.1.2.1.47.1.1.1.1.5.10 8
# .1.3.6.1.2.1.47.1.1.1.1.7.10 Chassis Temperature Sensor
# .1.3.6.1.2.1.47.1.1.1.1.11.10
# .1.3.6.1.2.1.47.1.1.1.1.13.10

# Note: Some bogus devices such as Cisco 2500 Series WLC or
# Cisco Wide Area Application Services do not have exactly
# one entry == "0" which means device itself or do not provide
# any information about physical class.
# In the first case {{Hardware > System}} will be omitted.
# In the second case we inventorize these components below physical
# components table {{Unknown entities}}.
# In all cases ports are ignored because we have an extra view
# for them.


def inv_snmp_extended_info(info):
    map_type = {
        "1": ("Other", "others"),
        "2": ("Unknown", "unknowns"),
        "3": ("Chassis", "chassis"),
        "4": ("Backplane", "backplanes"),
        "5": ("Container", "containers"),
        "6": ("PSU", "psus"),
        "7": ("Fan", "fans"),
        "8": ("Sensor", "sensors"),
        "9": ("Module", "modules"),
        "10": ("Port", "ports"),
        "11": ("Stack", "stacks"),
    }

<<<<<<< HEAD
=======
    # TODO: clean up call sites of map_type and move parse function to section definition

>>>>>>> upstream/master
    parsed = {}
    count_parents = 0
    for child, description, parent, child_type, name, software, \
        serial, manufacturer, model in info:
        if parent == "0":
            count_parents += 1
        if child_type in map_type:
            parsed.setdefault(
                child,
                (parent, description, child_type, name, software, serial, manufacturer, model))
        else:
            parsed.setdefault(
                child, (parent, description, "2", name, software, serial, manufacturer, model))

    node = None
    for index, (parent, description, entity_type, name, software, \
        serial, manufacturer, model) in parsed.items():
        if count_parents == 1 and parent == "0":
            node = inv_tree("hardware.system.")
            if serial:
                node["serial"] = serial
            if model:
                node["model"] = model

        elif entity_type != "10":
            if parsed.get(parent):
                location_info = (map_type[parsed[parent][2]][0], parent)
            elif parent == "0":
                location_info = ("Device", "0")
            else:
                location_info = ("Missing in ENTITY table", parent)
            node = inv_tree_list("hardware.components.%s:" % (map_type[entity_type][1]))
            node.append({
                "index": index,
                "name": name,
                "description": description,
                "software": software,
                "serial": serial,
                "manufacturer": manufacturer,
                "model": model,
                "location": "%s (%s)" % location_info,
            })

    return node


inv_info['snmp_extended_info'] = {
    'inv_function': inv_snmp_extended_info,
<<<<<<< HEAD
    'snmp_info': (
        '.1.3.6.1.2.1.47.1.1.1.1',
        [
            OID_END,
            "2",  # entPhysicalDescr
            "4",  # entPhysicalContainedIn
            "5",  # entPhysicalClass
            "7",  # entPhysicalName
            "10",  # entPhysicalSoftwareRev (NEW)
            "11",  # entPhysicalSerialNum
            "12",  # entPhysicalMfgName (NEW)
            "13",  # entPhysicalModelName
        ]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.47.1.1.1.1.*"),
=======
>>>>>>> upstream/master
}
