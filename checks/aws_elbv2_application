<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_aws_elbv2_application(info):
    metrics = _extract_aws_metrics_by_labels([
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.aws import *  # pylint: disable=wildcard-import,unused-wildcard-import


def parse_aws_elbv2_application(info):
    metrics = extract_aws_metrics_by_labels([
>>>>>>> upstream/master
        'ConsumedLCUs',
        'ActiveConnectionCount',
        'NewConnectionCount',
        'RejectedConnectionCount',
        'ClientTLSNegotiationErrorCount',
        'RequestCount',
        'HTTPCode_ELB_3XX_Count',
        'HTTPCode_ELB_4XX_Count',
        'HTTPCode_ELB_5XX_Count',
        'HTTPCode_ELB_500_Count',
        'HTTPCode_ELB_502_Count',
        'HTTPCode_ELB_503_Count',
        'HTTPCode_ELB_504_Count',
        'HTTP_Fixed_Response_Count',
        'HTTP_Redirect_Count',
        'HTTP_Redirect_Url_Limit_Exceeded_Count',
        'ProcessedBytes',
        'RuleEvaluations',
        'IPv6ProcessedBytes',
        'IPv6RequestCount',
    ], parse_aws(info))
    # We get exactly one entry: {INST-ID: METRICS}
    # INST-ID is the piggyback host name
    try:
<<<<<<< HEAD
        return metrics.values()[-1]
=======
        return list(metrics.values())[-1]
>>>>>>> upstream/master
    except IndexError:
        return {}


#   .--LCU-----------------------------------------------------------------.
#   |                          _     ____ _   _                            |
#   |                         | |   / ___| | | |                           |
#   |                         | |  | |   | | | |                           |
#   |                         | |__| |___| |_| |                           |
#   |                         |_____\____|\___/                            |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_aws_elbv2_application_lcu(item, params, parsed):
<<<<<<< HEAD
    lcus = parsed['ConsumedLCUs']
    yield check_levels(lcus,
                       'aws_consumed_lcus',
                       params.get('levels'),
                       human_readable_func=int,
                       infoname="Consumed")
=======
    lcus = parsed.get('ConsumedLCUs')
    if lcus is None:
        raise MKCounterWrapped("Currently no data from AWS")
    yield check_levels(lcus,
                       'aws_consumed_lcus',
                       params.get('levels'),
                       human_readable_func=aws_get_float_human_readable,
                       infoname="Consumption")
>>>>>>> upstream/master


check_info['aws_elbv2_application'] = {
    'parse_function': parse_aws_elbv2_application,
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['ConsumedLCUs']),
    'check_function': check_aws_elbv2_application_lcu,
    'service_description': 'AWS/ApplicationELB LCUs',
<<<<<<< HEAD
    'includes': ['aws.include'],
=======
>>>>>>> upstream/master
    'group': 'aws_elbv2_lcu',
    'has_perfdata': True,
}

#.
#   .--connections---------------------------------------------------------.
#   |                                        _   _                         |
#   |         ___ ___  _ __  _ __   ___  ___| |_(_) ___  _ __  ___         |
#   |        / __/ _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \/ __|        |
#   |       | (_| (_) | | | | | | |  __/ (__| |_| | (_) | | | \__ \        |
#   |        \___\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|___/        |
#   |                                                                      |
#   '----------------------------------------------------------------------'

_aws_elbv2_application_connection_types = [
    'ActiveConnectionCount',
    'NewConnectionCount',
    'RejectedConnectionCount',
    'ClientTLSNegotiationErrorCount',
]


<<<<<<< HEAD
def inventory_aws_elbv2_application_connections(parsed):
    for conn_ty in _aws_elbv2_application_connection_types:
        if conn_ty in parsed:
            return [(None, {})]


def check_aws_elbv2_application_connections(item, params, parsed):
    for conn_ty, (key, title) in zip(_aws_elbv2_application_connection_types, [
=======
def check_aws_elbv2_application_connections(item, params, parsed):

    metric_infos = []

    for cw_metric_name, (info_name, key) in zip(_aws_elbv2_application_connection_types, [
>>>>>>> upstream/master
        ('Active', 'active'),
        ('New', 'new'),
        ('Rejected', 'rejected'),
        ('TLS errors', 'tls_errors'),
    ]):
<<<<<<< HEAD
        conns = parsed.get(conn_ty)
        if conns is None:
            continue
        yield check_levels(conns,
                           'aws_%s_connections' % key,
                           None,
                           human_readable_func=int,
                           infoname=title)
=======
        if key == 'tls_errors':
            metric_name = 'aws_client_tls_errors'
        else:
            metric_name = 'aws_%s_connections' % key

        metric_infos.append({
            'metric_val': parsed.get(cw_metric_name),
            'metric_name': metric_name,
            'info_name': info_name,
            'human_readable_func': aws_get_counts_rate_human_readable
        })

    return check_aws_metrics(metric_infos)
>>>>>>> upstream/master


check_info['aws_elbv2_application.connections'] = {
    'parse_function': parse_aws_elbv2_application,
<<<<<<< HEAD
    'inventory_function': inventory_aws_elbv2_application_connections,
    'check_function': check_aws_elbv2_application_connections,
    'service_description': 'AWS/ApplicationELB Connections',
    'includes': ['aws.include'],
=======
    'inventory_function': lambda p: inventory_aws_generic_single(
        p, _aws_elbv2_application_connection_types, requirement=any),
    'check_function': check_aws_elbv2_application_connections,
    'service_description': 'AWS/ApplicationELB Connections',
>>>>>>> upstream/master
    'has_perfdata': True,
}

#.
#   .--HTTP ELB------------------------------------------------------------.
#   |             _   _ _____ _____ ____    _____ _     ____               |
#   |            | | | |_   _|_   _|  _ \  | ____| |   | __ )              |
#   |            | |_| | | |   | | | |_) | |  _| | |   |  _ \              |
#   |            |  _  | | |   | | |  __/  | |___| |___| |_) |             |
#   |            |_| |_| |_|   |_| |_|     |_____|_____|____/              |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_aws_elbv2_application_http_elb(item, params, parsed):
<<<<<<< HEAD
    now = time.time()
    request_count = parsed.get('RequestCount')
    if request_count is not None:
        request_rate = get_rate('aws_elb_statistics', now, request_count)
        yield 0, 'Requests: %s/s' % request_rate, [('requests_per_second', request_rate)]
    else:
        request_rate = 0

    for http_errors_nr in ["4", "5"]:
        http_errors = parsed.get('HTTPCode_ELB_%sXX_Count' % http_errors_nr)
        if http_errors is None:
            continue

        http_errors_rate = get_rate('aws_elbv2_http_elb.%sxx' % http_errors_nr, now, http_errors)
        yield (0, '%sXX-Errors: %s/s' % (http_errors_nr, http_errors_rate),
               [('http_%sxx_rate' % http_errors_nr, http_errors_rate)])

        try:
            http_errors_perc = 100.0 * http_errors_rate / request_rate
        except ZeroDivisionError:
            pass
        else:
            yield check_levels(http_errors_perc,
                               'http_%sxx_perc' % http_errors_nr,
                               params.get('levels_http_%sxx_perc' % http_errors_nr),
                               human_readable_func=get_percent_human_readable,
                               infoname="%sXX-Errors of total requests" % http_errors_nr)

    http_backend_3xx = parsed.get('HTTPCode_ELB_3XX_Count')
    if http_backend_3xx is not None:
        yield 0, '3XX-Requests: %s/s' % get_rate('aws_elbv2_http_elb.3xx', now, http_backend_3xx)

    for http_500_errors_nr in ["0", "2", "3", "4"]:
        http_500_errors = parsed.get('HTTPCode_ELB_50%s_Count' % http_500_errors_nr)
        if http_500_errors is None:
            continue

        http_500_errors_rate = get_rate('aws_elbv2_http_elb.50%s' % http_500_errors_nr, now,
                                        http_500_errors)
        yield 0, '50%s-Errors: %s/s' % (http_500_errors_nr, http_500_errors_rate)


check_info['aws_elbv2_application.http_elb'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, [
        'RequestCount', 'HTTPCode_ELB_3XX_Count', 'HTTPCode_ELB_4XX_Count', 'HTTPCode_ELB_5XX_Count'
    ]),
    'check_function': check_aws_elbv2_application_http_elb,
    'service_description': 'AWS/ApplicationELB HTTP ELB',
    'includes': ['aws.include'],
=======
    return check_aws_http_errors(params.get("levels_load_balancers", params), parsed,
                                 ['3xx', '4xx', '5xx', '500', '502', '503', '504'],
                                 'HTTPCode_ELB_%s_Count')


check_info['aws_elbv2_application.http_elb'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['RequestCount']),
    'check_function': check_aws_elbv2_application_http_elb,
    'service_description': 'AWS/ApplicationELB HTTP ELB',
>>>>>>> upstream/master
    'group': 'aws_elb_http',
    'has_perfdata': True,
}

#.
#   .--HTTP redirects------------------------------------------------------.
#   |  _   _ _____ _____ ____                 _ _               _          |
#   | | | | |_   _|_   _|  _ \   _ __ ___  __| (_)_ __ ___  ___| |_ ___    |
#   | | |_| | | |   | | | |_) | | '__/ _ \/ _` | | '__/ _ \/ __| __/ __|   |
#   | |  _  | | |   | | |  __/  | | |  __/ (_| | | | |  __/ (__| |_\__ \   |
#   | |_| |_| |_|   |_| |_|     |_|  \___|\__,_|_|_|  \___|\___|\__|___/   |
#   |                                                                      |
#   '----------------------------------------------------------------------'

<<<<<<< HEAD

def check_aws_elbv2_application_http_redirects(item, params, parsed):
    for redirect_ty, title, key in [
        ('HTTP_Redirect_Count', 'Successful', 'http_redirects'),
        ('HTTP_Redirect_Url_Limit_Exceeded_Count', 'Not completed', 'http_redirect_url_limit'),
        ('HTTP_Fixed_Response_Count', 'Successful fixed-responses', 'http_fixed_response'),
    ]:
        redirects = parsed.get(redirect_ty)
        if redirects is None:
            continue
        yield check_levels(redirects, 'aws_%s' % key, None, human_readable_func=int, infoname=title)


check_info['aws_elbv2_application.http_redirects'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, [
        'HTTP_Redirect_Count',
        'HTTP_Redirect_Url_Limit_Exceeded_Count',
    ]),
    'check_function': check_aws_elbv2_application_http_redirects,
    'service_description': 'AWS/ApplicationELB HTTP Redirects',
    'includes': ['aws.include'],
=======
_aws_elbv2_application_http_redirects_metrics = [
    'HTTP_Redirect_Count',
    'HTTP_Redirect_Url_Limit_Exceeded_Count',
    'HTTP_Fixed_Response_Count',
]


def check_aws_elbv2_application_http_redirects(item, params, parsed):
    return check_aws_metrics([{
        'metric_val': parsed.get(cw_metric_name),
        'metric_name': 'aws_%s' % key,
        'info_name': info_name,
        'human_readable_func': aws_get_counts_rate_human_readable
    } for cw_metric_name, (info_name, key) in zip(_aws_elbv2_application_http_redirects_metrics, [(
        'Successful', 'http_redirects'), (
            'Not completed',
            'http_redirect_url_limit'), ('Successful fixed responses', 'http_fixed_response')])])


check_info['aws_elbv2_application.http_redirects'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(
        p, _aws_elbv2_application_http_redirects_metrics, requirement=any),
    'check_function': check_aws_elbv2_application_http_redirects,
    'service_description': 'AWS/ApplicationELB HTTP Redirects',
>>>>>>> upstream/master
    'has_perfdata': True,
}

#.
#   .--statistics----------------------------------------------------------.
#   |                    _        _   _     _   _                          |
#   |                ___| |_ __ _| |_(_)___| |_(_) ___ ___                 |
#   |               / __| __/ _` | __| / __| __| |/ __/ __|                |
#   |               \__ \ || (_| | |_| \__ \ |_| | (__\__ \                |
#   |               |___/\__\__,_|\__|_|___/\__|_|\___|___/                |
#   |                                                                      |
#   '----------------------------------------------------------------------'

<<<<<<< HEAD

def inventory_aws_elbv2_application_statistics(parsed):
    for metric in [
            'ProcessedBytes',
            'IPv6ProcessedBytes',
            'IPv6RequestCount',
            'RuleEvaluations',
    ]:
        if metric in parsed:
            return [(None, {})]


def check_aws_elbv2_application_statistics(item, params, parsed):
    processed_bytes = parsed.get('ProcessedBytes')
    if processed_bytes is not None:
        yield check_levels(processed_bytes,
                           "aws_proc_bytes",
                           None,
                           human_readable_func=get_bytes_human_readable,
                           infoname="Processed bytes")

    ipv6_processed_bytes = parsed.get('IPv6ProcessedBytes')
    if ipv6_processed_bytes is not None:
        yield check_levels(ipv6_processed_bytes,
                           "aws_ipv6_proc_bytes",
                           None,
                           human_readable_func=get_bytes_human_readable,
                           infoname="IPv6 Processed bytes")

    ipv6_requests = parsed.get('IPv6RequestCount')
    if ipv6_requests is not None:
        yield check_levels(ipv6_requests,
                           "aws_ipv6_requests",
                           None,
                           human_readable_func=int,
                           infoname="IPv6 requests")

    rule_evaluations = parsed.get('RuleEvaluations')
    if rule_evaluations is not None:
        yield check_levels(rule_evaluations,
                           'aws_rule_evaluations',
                           None,
                           human_readable_func=int,
                           infoname="Rule evaluations")


check_info['aws_elbv2_application.statistics'] = {
    'inventory_function': inventory_aws_elbv2_application_statistics,
    'check_function': check_aws_elbv2_application_statistics,
    'service_description': 'AWS/ApplicationELB Statistics',
    'includes': ['aws.include'],
=======
_aws_elbv2_application_statistics_metrics = [
    'ProcessedBytes',
    'IPv6ProcessedBytes',
    'IPv6RequestCount',
    'RuleEvaluations',
]


def check_aws_elbv2_application_statistics(item, params, parsed):

    metric_infos = []

    for cw_metric_name, (info_name,
                         metric_name) in zip(_aws_elbv2_application_statistics_metrics,
                                             [('Processed bytes', 'aws_proc_bytes'),
                                              ('IPv6 Processed bytes', 'aws_ipv6_proc_bytes'),
                                              ('IPv6RequestCount', 'aws_ipv6_requests'),
                                              ('Rule evaluations', 'aws_rule_evaluations')]):

        if 'bytes' in metric_name:
            human_readable_func = aws_get_bytes_rate_human_readable
        else:
            human_readable_func = aws_get_counts_rate_human_readable

        metric_infos.append({
            'metric_val': parsed.get(cw_metric_name),
            'metric_name': metric_name,
            'info_name': info_name,
            'human_readable_func': human_readable_func
        })

    return check_aws_metrics(metric_infos)


check_info['aws_elbv2_application.statistics'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(
        p, _aws_elbv2_application_statistics_metrics, requirement=any),
    'check_function': check_aws_elbv2_application_statistics,
    'service_description': 'AWS/ApplicationELB Statistics',
>>>>>>> upstream/master
    'has_perfdata': True,
}
