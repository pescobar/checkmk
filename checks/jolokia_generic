<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.jolokia import *  # pylint: disable=wildcard-import,unused-wildcard-import
>>>>>>> upstream/master


def parse_jolokia_generic(info):
    parsed = {}
    for line in info:
        try:
            instance, mbean, value, type_ = jolokia_basic_split(line, 4)
<<<<<<< HEAD
=======
            if type_ in ("rate", "number"):
                value = float(value)
>>>>>>> upstream/master
        except ValueError:
            continue
        item = "%s %s" % (instance, mbean)
        parsed[item] = {"value": value, "type": type_}

    return parsed


#.
#   .--String--------------------------------------------------------------.
#   |                    ____  _        _                                  |
#   |                   / ___|| |_ _ __(_)_ __   __ _                      |
#   |                   \___ \| __| '__| | '_ \ / _` |                     |
#   |                    ___) | |_| |  | | | | | (_| |                     |
#   |                   |____/ \__|_|  |_|_| |_|\__, |                     |
#   |                                           |___/                      |
#   '----------------------------------------------------------------------'


<<<<<<< HEAD
def inventory_jolokia_generic_string(parsed):
    for item in parsed:
        if parsed[item]["type"] == "string":
            yield item, {}


def check_jolokia_generic_string(item, params, parsed):
    if item not in parsed:
        return 3, "Item not found in agent output"
    value = parsed[item]["value"]
    default_status = params.get("default_status", 0)
=======
@get_parsed_item_data
def check_jolokia_generic_string(_item, params, data):
    value = data["value"]
>>>>>>> upstream/master

    search_strings = params.get("match_strings", [])
    for search_string, status in search_strings:
        if search_string in value:
            return status, "%s: %s matches" % (value, search_string)

<<<<<<< HEAD
    return default_status, value


check_info["jolokia_generic.string"] = {
    "inventory_function": inventory_jolokia_generic_string,
=======
    return params.get("default_status", 0), value


check_info["jolokia_generic.string"] = {
    "inventory_function": discover(lambda key, data: data.get("type") == "string"),
>>>>>>> upstream/master
    "check_function": check_jolokia_generic_string,
    "service_description": "JVM %s",
    "group": "generic_string",
}

#.
#   .--Rate----------------------------------------------------------------.
#   |                         ____       _                                 |
#   |                        |  _ \ __ _| |_ ___                           |
#   |                        | |_) / _` | __/ _ \                          |
#   |                        |  _ < (_| | ||  __/                          |
#   |                        |_| \_\__,_|\__\___|                          |
#   |                                                                      |
#   '----------------------------------------------------------------------'


<<<<<<< HEAD
def inventory_jolokia_generic_rate(parsed):
    for item, data in parsed.iteritems():
        if data.get("type") == "rate":
            try:
                float(data["value"])
            except (KeyError, ValueError):
                continue
            yield item, {}


def check_jolokia_generic_rate(item, params, parsed):
    if item not in parsed:
        yield 3, "Item not found in agent output"
        return
    now = time.time()

    try:
        value = float(parsed[item]["value"])
    except ValueError:
        yield 3, "Non-numeric MBean value"
        return

    rate = get_rate(item, now, value)
    infotext = "%.1f" % rate
    perfdata = None

    if params:
        if params.get("levels"):
            status = 0
            warn, crit = params["levels"]
            perfdata = [("generic_rate", rate, warn, crit)]
            levelstext = "(warn/crit at %.1f/%.1f)" % (warn, crit)

            if rate >= crit:
                status = 2
            elif rate >= warn:
                status = 1

            if not status:
                levelstext = ""
            yield status, levelstext

        if params.get("levels_lower"):
            status = 0
            warn_lower, crit_lower = params["levels_lower"]
            levelstext_lower = "(warn/crit below %.1f/%.1f)" % (warn_lower, crit_lower)
            if rate < crit_lower:
                status = 2
            elif rate < warn_lower:
                status = 1
            if not status:
                levelstext_lower = ""
            yield status, levelstext_lower

    if not perfdata:
        perfdata = [("generic_rate", rate)]

    yield 0, infotext, perfdata


check_info["jolokia_generic.rate"] = {
    "inventory_function": inventory_jolokia_generic_rate,
=======
@get_parsed_item_data
def check_jolokia_generic_rate(item, params, data):
    rate = get_rate(item, time.time(), data["value"])
    levels = params.get("levels", (None, None)) + params.get("levels_lower", (None, None))
    return check_levels(rate, "generic_rate", levels)


check_info["jolokia_generic.rate"] = {
    "inventory_function": discover(lambda key, data: data.get("type") == "rate"),
>>>>>>> upstream/master
    "check_function": check_jolokia_generic_rate,
    "service_description": "JVM %s",
    "has_perfdata": True,
    "group": "generic_rate",
}

#.
#   .--Number--------------------------------------------------------------.
#   |                _   _                 _                               |
#   |               | \ | |_   _ _ __ ___ | |__   ___ _ __                 |
#   |               |  \| | | | | '_ ` _ \| '_ \ / _ \ '__|                |
#   |               | |\  | |_| | | | | | | |_) |  __/ |                   |
#   |               |_| \_|\__,_|_| |_| |_|_.__/ \___|_|                   |
#   |                                                                      |
#   '----------------------------------------------------------------------'


<<<<<<< HEAD
def inventory_jolokia_generic(parsed):
    for item, data in parsed.iteritems():
        if data.get("type") == "number":
            try:
                float(data["value"])
            except (KeyError, ValueError):
                continue
            yield item, {}


def check_jolokia_generic(item, params, parsed):
    if item not in parsed:
        yield 3, "Item not found in agent output"
        return

    try:
        value = float(parsed[item]["value"])
    except ValueError:
        yield 3, "Non-numeric MBean value"
        return

    infotext = "%.1f" % value
    perfdata = None

    if params:
        if params.get("levels"):
            status = 0
            warn, crit = params["levels"]
            perfdata = [("generic_number", value, warn, crit)]
            levelstext = "(warn/crit at %.1f/%.1f)" % (warn, crit)

            if value >= crit:
                status = 2
            elif value >= warn:
                status = 1

            if not status:
                levelstext = ""
            yield status, levelstext

        if params.get("levels_lower"):
            status = 0
            warn_lower, crit_lower = params["levels_lower"]
            levelstext_lower = "(warn/crit below %.1f/%.1f)" % (warn_lower, crit_lower)
            if value < crit_lower:
                status = 2
            elif value < warn_lower:
                status = 1
            if not status:
                levelstext_lower = ""
            yield status, levelstext_lower

    if not perfdata:
        perfdata = [("generic_number", value)]

    yield 0, infotext, perfdata


check_info["jolokia_generic"] = {
    "includes": ["jolokia.include"],
    "parse_function": parse_jolokia_generic,
    "inventory_function": inventory_jolokia_generic,
    "check_function": check_jolokia_generic,
=======
@get_parsed_item_data
def check_jolokia_generic(_item, params, data):
    levels = params.get("levels", (None, None)) + params.get("levels_lower", (None, None))
    return check_levels(data["value"], "generic_number", levels)


check_info["jolokia_generic"] = {
    "inventory_function": discover(lambda key, data: data.get("type") == "number"),
    "check_function": check_jolokia_generic,
    "parse_function": parse_jolokia_generic,
>>>>>>> upstream/master
    "service_description": "JVM %s",
    "has_perfdata": True,
    "group": "generic_number",
}
