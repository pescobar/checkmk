<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.didactum import *  # pylint: disable=wildcard-import,unused-wildcard-import
>>>>>>> upstream/master
# .1.3.6.1.4.1.46501.5.1.1.4.101001 dry --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretType.101001
# .1.3.6.1.4.1.46501.5.1.1.4.101002 dry --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretType.101002
# .1.3.6.1.4.1.46501.5.1.1.4.101003 dry --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretType.101003
# .1.3.6.1.4.1.46501.5.1.1.4.101004 dry --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretType.101004
# .1.3.6.1.4.1.46501.5.1.1.5.101001 Dry-1 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretName.101001
# .1.3.6.1.4.1.46501.5.1.1.5.101002 Dry-2 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretName.101002
# .1.3.6.1.4.1.46501.5.1.1.5.101003 Dry-3 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretName.101003
# .1.3.6.1.4.1.46501.5.1.1.5.101004 Dry-4 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretName.101004
# .1.3.6.1.4.1.46501.5.1.1.6.101001 normal --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretState.101001
# .1.3.6.1.4.1.46501.5.1.1.6.101002 normal --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretState.101002
# .1.3.6.1.4.1.46501.5.1.1.6.101003 normal --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretState.101003
# .1.3.6.1.4.1.46501.5.1.1.6.101004 normal --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretState.101004
# .1.3.6.1.4.1.46501.5.1.1.7.101001 0 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretValue.101001
# .1.3.6.1.4.1.46501.5.1.1.7.101002 0 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretValue.101002
# .1.3.6.1.4.1.46501.5.1.1.7.101003 0 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretValue.101003
# .1.3.6.1.4.1.46501.5.1.1.7.101004 0 --> DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretValue.101004


def inventory_didactum_sensors_discrete_dry(parsed):
    inventory = []
    for discrete_sensort_type in ["dry", "smoke"]:
        inventory += inventory_didactum_sensors(parsed, discrete_sensort_type)
    return inventory


def check_didactum_sensors_discrete_dry(item, params, parsed):
    if item in parsed.get("dry", {}):
        data = parsed["dry"][item]
    elif item in parsed.get("smoke", {}):
        data = parsed["smoke"][item]
    else:
        return 3, "Discrete sensor %s not found in SNMP data." % item
    return data["state"], "Status: %s" % data["state_readable"]


check_info['didactum_sensors_discrete'] = {
    'parse_function': parse_didactum_sensors,
    'inventory_function': inventory_didactum_sensors_discrete_dry,
    'check_function': check_didactum_sensors_discrete_dry,
    'service_description': 'Discrete sensor %s',
    'snmp_info': (
        '.1.3.6.1.4.1.46501.5.1.1',
        [
            "4",  # DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretType
            "5",  # DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretName
            "6",  # DIDACTUM-SYSTEM-MIB::ctlInternalSensorsDiscretState
        ]),
    'snmp_scan_function': scan_didactum,
<<<<<<< HEAD
    'includes': ['didactum.include'],
=======
>>>>>>> upstream/master
}
