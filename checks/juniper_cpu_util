<<<<<<< HEAD
#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_juniper_cpu_util(info):
    for line in info:
        if "Routing Engine" in line[0]:
            yield line[0], {'levels': (80.0, 90.0)}


def check_juniper_cpu_util(item, params, info):
    if not params:
        params = {'levels': (80.0, 90.0)}

    for name, util in info:
        if name == item:
            if util == "":
                return 3, "Information not available"
            return check_cpu_util(int(util), params)


check_info['juniper_cpu_util'] = {
=======
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.cpu_util import *  # pylint: disable=wildcard-import,unused-wildcard-import
# Default settings for warn/crit values
factory_settings['juniper_cpu_default'] = {'levels': (80.0, 90.0)}


def parse_juniper_cpu_util(info):
    parsed = {}
    for raw_name, raw_util in info:
        name = raw_name.replace('@ ', '') \
                       .replace('/*', '') \
                       .strip()
        if raw_util == "":
            continue
        parsed[name] = int(raw_util)
    return parsed


def inventory_juniper_cpu_util(parsed):
    for descr, util in parsed.items():
        if util > 0:
            # JUNIPER-MIB::jnxOperatingCPU
            # The CPU utilization in percentage of this
            # subject. Zero if unavailable or inapplicable.
            yield descr, {}


@get_parsed_item_data
def check_juniper_cpu_util(item, params, util):
    if not params:
        params = {'levels': (80.0, 90.0)}

    return check_cpu_util(util, params.get('levels'))


check_info['juniper_cpu_util'] = {
    'parse_function': parse_juniper_cpu_util,
>>>>>>> upstream/master
    'check_function': check_juniper_cpu_util,
    'inventory_function': inventory_juniper_cpu_util,
    'group': 'juniper_cpu_util',
    'service_description': "CPU utilization %s",
    'has_perfdata': True,
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2636.1.1.1"
                                                                          ),
    'snmp_info': (
        ".1.3.6.1.4.1.2636.3.1.13.1",
        [
<<<<<<< HEAD
            5,  #jnxOperatingDescr
            8,  #jnxOperatingCPU
        ]),
    'includes': ["cpu_util.include"],
=======
            5,  # jnxOperatingDescr
            8,  # jnxOperatingCPU
        ]),
    'default_levels_variable': 'juniper_cpu_default',
>>>>>>> upstream/master
}
